#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import urllib.request
import urllib.parse
import urllib.error
import time
import re
from typing import Dict, List, Optional, Any

class GeminiAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models"
        self.model = "gemini-2.0-flash-exp"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        
    def _make_request(self, url: str, data: dict) -> dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
        try:
            json_data = json.dumps(data).encode('utf-8')
            req = urllib.request.Request(
                url,
                data=json_data,
                headers={
                    'Content-Type': 'application/json',
                }
            )
            
            with urllib.request.urlopen(req, timeout=30) as response:
                return json.loads(response.read().decode('utf-8'))
                
        except urllib.error.HTTPError as e:
            error_body = e.read().decode('utf-8')
            print(f"HTTP Error {e.code}: {error_body}")
            return {"error": f"HTTP {e.code}: {error_body}"}
        except Exception as e:
            print(f"Request error: {e}")
            return {"error": str(e)}
    
    def generate_text(self, prompt: str, system_instruction: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini"""
        url = f"{self.base_url}/{self.model}:generateContent?key={self.api_key}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø—Ä–æ—Å–∞
        contents = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if system_instruction:
            contents.append({
                "role": "user",
                "parts": [{"text": f"SYSTEM: {system_instruction}"}]
            })
            contents.append({
                "role": "model", 
                "parts": [{"text": "–ü–æ–Ω—è–ª —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"}]
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        contents.append({
            "role": "user",
            "parts": [{"text": prompt}]
        })
        
        data = {
            "contents": contents,
            "generationConfig": {
                "temperature": 0.7,
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": 2048,
            },
            "safetySettings": [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH", 
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
        }
        
        response = self._make_request(url, data)
        
        if "error" in response:
            return f"‚ùå –û—à–∏–±–∫–∞ API: {response['error']}"
        
        try:
            return response["candidates"][0]["content"]["parts"][0]["text"]
        except (KeyError, IndexError) as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}"

class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""
    
    def __init__(self, token: str, gemini_api: GeminiAPI):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.gemini = gemini_api
        self.last_update_id = 0
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.user_settings: Dict[int, Dict] = {}
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        self.system_prompts = {
            "assistant": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram: **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**, *–∫—É—Ä—Å–∏–≤*, `–∫–æ–¥`, ```–±–ª–æ–∫ –∫–æ–¥–∞```. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.",
            "creative": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–∏—à–∏ —è—Ä–∫–æ, –æ–±—Ä–∞–∑–Ω–æ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. **–í—ã–¥–µ–ª—è–π** –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–≤–∞–π *–∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ* –æ–ø–∏—Å–∞–Ω–∏—è.",
            "technical": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç. –î–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π:\n‚Ä¢ **–ó–∞–≥–æ–ª–æ–≤–∫–∏** –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤\n‚Ä¢ `–∫–æ–¥` –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤\n‚Ä¢ –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
            "teacher": "–¢—ã —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π —É—á–∏—Ç–µ–ª—å. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π:\nüìö **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è**\nüí° *–ü—Ä–∏–º–µ—Ä—ã* –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏\n‚úÖ **–í—ã–≤–æ–¥—ã** –≤ –∫–æ–Ω—Ü–µ",
            "casual": "–û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–∞–∫ —Å —Ö–æ—Ä–æ—à–∏–º –¥—Ä—É–≥–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ üòä –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å. **–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π** –≤–∞–∂–Ω–æ–µ, –Ω–æ –Ω–µ –±—É–¥—å —Å–ª–∏—à–∫–æ–º —Å–µ—Ä—å–µ–∑–Ω—ã–º."
        }
    
    def _make_request(self, method: str, params: dict = None) -> dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
        url = f"{self.base_url}/{method}"
        
        if params:
            data = urllib.parse.urlencode(params).encode('utf-8')
            req = urllib.request.Request(url, data=data)
        else:
            req = urllib.request.Request(url)
        
        try:
            with urllib.request.urlopen(req, timeout=10) as response:
                return json.loads(response.read().decode('utf-8'))
        except Exception as e:
            print(f"Telegram API error: {e}")
            return {"ok": False, "error": str(e)}
    
    def get_updates(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        params = {
            'offset': self.last_update_id + 1,
            'timeout': 10,
            'allowed_updates': json.dumps(['message', 'callback_query'])
        }
        
        response = self._make_request('getUpdates', params)
        
        if response.get('ok'):
            updates = response['result']
            if updates:
                self.last_update_id = updates[-1]['update_id']
            return updates
        return []
    
    def send_message(self, chat_id: int, text: str, reply_markup: dict = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        params = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': 'true'
        }
        
        if reply_markup:
            params['reply_markup'] = json.dumps(reply_markup)
        
        response = self._make_request('sendMessage', params)
        return response.get('ok', False)
    
    def answer_callback_query(self, callback_query_id: str, text: str = "") -> bool:
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query"""
        params = {
            'callback_query_id': callback_query_id,
            'text': text
        }
        response = self._make_request('answerCallbackQuery', params)
        return response.get('ok', False)
    
    def get_user_settings(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_settings:
            self.user_settings[user_id] = {
                'system_prompt': 'assistant',
                'custom_prompt': '',
                'temperature': 0.7
            }
        return self.user_settings[user_id]
    
    def format_gemini_response(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç Gemini –¥–ª—è Telegram"""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\n{3,}', '\n\n', text)
        text = text.strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 4000:
            text = text[:4000] + "\n\n*...—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ*"
        
        return text
    
    def create_settings_keyboard(self, user_id: int) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings = self.get_user_settings(user_id)
        current_prompt = settings['system_prompt']
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {'‚úÖ' if current_prompt == 'assistant' else ''}", "callback_data": "prompt_assistant"},
                    {"text": f"üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π {'‚úÖ' if current_prompt == 'creative' else ''}", "callback_data": "prompt_creative"}
                ],
                [
                    {"text": f"‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π {'‚úÖ' if current_prompt == 'technical' else ''}", "callback_data": "prompt_technical"},
                    {"text": f"üìö –£—á–∏—Ç–µ–ª—å {'‚úÖ' if current_prompt == 'teacher' else ''}", "callback_data": "prompt_teacher"}
                ],
                [
                    {"text": f"üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π {'‚úÖ' if current_prompt == 'casual' else ''}", "callback_data": "prompt_casual"}
                ],
                [
                    {"text": "üìù –°–≤–æ–π –ø—Ä–æ–º–ø—Ç", "callback_data": "custom_prompt"},
                    {"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback_data": "close_settings"}
                ]
            ]
        }
        return keyboard
    
    def handle_message(self, message: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        text = message.get('text', '')
        
        # –ö–æ–º–∞–Ω–¥—ã
        if text.startswith('/start'):
            welcome_text = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini Bot!**

–Ø –∏—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å **Gemini 2.5 Pro** –æ—Ç Google –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
‚Ä¢ `/help` - —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!

‚ú® *–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*"""
            self.send_message(chat_id, welcome_text)
            return
            
        elif text.startswith('/settings'):
            settings_text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:"
            keyboard = self.create_settings_keyboard(user_id)
            self.send_message(chat_id, settings_text, keyboard)
            return
            
        elif text.startswith('/help'):
            help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –†–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è
‚Ä¢ –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–º–ø—Ç—ã

**–°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è:**
ü§ñ **–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç** - –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
üé® **–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π** - —è—Ä–∫–∏–µ, –æ–±—Ä–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã  
‚öôÔ∏è **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π** - —Ç–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üìö **–£—á–∏—Ç–µ–ª—å** - –æ–±—É—á–∞—é—â–∏–π —Å—Ç–∏–ª—å
üòä **–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π** - –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/settings` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!"""
            self.send_message(chat_id, help_text)
            return
        
        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI
        if text:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
            self.send_message(chat_id, "ü§î *–î—É–º–∞—é...*")
            
            settings = self.get_user_settings(user_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            if settings['custom_prompt']:
                system_instruction = settings['custom_prompt']
            else:
                system_instruction = self.system_prompts[settings['system_prompt']]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
            response = self.gemini.generate_text(text, system_instruction)
            formatted_response = self.format_gemini_response(response)
            
            self.send_message(chat_id, formatted_response)
    
    def handle_callback_query(self, callback_query: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query"""
        query_id = callback_query['id']
        user_id = callback_query['from']['id']
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        if data.startswith('prompt_'):
            prompt_type = data.replace('prompt_', '')
            settings = self.get_user_settings(user_id)
            settings['system_prompt'] = prompt_type
            settings['custom_prompt'] = ''  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            settings_text = f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: **{prompt_type.title()}** ‚úÖ"
            keyboard = self.create_settings_keyboard(user_id)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            params = {
                'chat_id': chat_id,
                'message_id': callback_query['message']['message_id'],
                'text': settings_text,
                'parse_mode': 'Markdown',
                'reply_markup': json.dumps(keyboard)
            }
            self._make_request('editMessageText', params)
            
            self.answer_callback_query(query_id, f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {prompt_type.title()}")
            
        elif data == 'custom_prompt':
            self.send_message(chat_id, "üìù **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n*–ü—Ä–∏–º–µ—Ä:* –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏. –î–∞–≤–∞–π —Ä–µ—Ü–µ–ø—Ç—ã —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏...")
            self.answer_callback_query(query_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç")
            
        elif data == 'close_settings':
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            params = {
                'chat_id': chat_id,
                'message_id': callback_query['message']['message_id']
            }
            self._make_request('deleteMessage', params)
            self.answer_callback_query(query_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        while True:
            try:
                updates = self.get_updates()
                
                for update in updates:
                    if 'message' in update:
                        self.handle_message(update['message'])
                    elif 'callback_query' in update:
                        self.handle_callback_query(update['callback_query'])
                
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except KeyboardInterrupt:
                print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    GEMINI_API_KEY = "AIzaSyCs4lN-RNNs96EUSdWux3yBwz_7IoElnBo"  # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ù–û–í–´–ô –ö–õ–Æ–ß!
    
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤
    gemini_api = GeminiAPI(GEMINI_API_KEY)
    bot = TelegramBot(BOT_TOKEN, gemini_api)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.run()

if __name__ == "__main__":
    main()